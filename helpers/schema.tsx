/**
 * This file was generated by kysely-codegen.
 * Please do not edit it manually.
 */

import type { ColumnType } from "kysely";

export type Generated<T> = T extends ColumnType<infer S, infer I, infer U>
  ? ColumnType<S, I | undefined, U>
  : ColumnType<T, T | undefined, T>;

export type Timestamp = ColumnType<Date, Date | string, Date | string>;

export type UserRole = "admin" | "user";

export interface ImageAssets {
  altText: string | null;
  createdAt: Generated<Timestamp | null>;
  filename: string;
  id: Generated<number>;
  mimeType: string | null;
  sizeBytes: number | null;
  updatedAt: Generated<Timestamp | null>;
  url: string;
}

export interface LoginAttempts {
  attemptedAt: Generated<Timestamp | null>;
  email: string;
  id: Generated<number>;
  success: Generated<boolean | null>;
}

export interface MenuCategories {
  createdAt: Generated<Timestamp | null>;
  displayOrder: Generated<number | null>;
  id: Generated<number>;
  name: string;
  updatedAt: Generated<Timestamp | null>;
}

export interface MenuItems {
  categoryId: number;
  createdAt: Generated<Timestamp | null>;
  description: string | null;
  displayOrder: Generated<number | null>;
  id: Generated<number>;
  imageUrl: string | null;
  name: string;
  priceGil: number;
  updatedAt: Generated<Timestamp | null>;
}

export interface PageContent {
  content: string | null;
  contentType: string;
  createdAt: Generated<Timestamp | null>;
  displayOrder: Generated<number | null>;
  id: Generated<number>;
  pageSlug: string;
  sectionKey: string;
  updatedAt: Generated<Timestamp | null>;
}

export interface Pages {
  content: string | null;
  createdAt: Generated<Timestamp | null>;
  displayOrder: Generated<number | null>;
  id: Generated<number>;
  isPublished: Generated<boolean | null>;
  slug: string;
  title: string;
  updatedAt: Generated<Timestamp | null>;
}

export interface Sessions {
  createdAt: Generated<Timestamp | null>;
  expiresAt: Timestamp;
  id: string;
  lastAccessed: Generated<Timestamp | null>;
  userId: number;
}

export interface SiteSettings {
  key: string;
  updatedAt: Generated<Timestamp | null>;
  value: string | null;
}

export interface Staff {
  bio: string | null;
  createdAt: Generated<Timestamp | null>;
  displayOrder: Generated<number | null>;
  id: Generated<number>;
  name: string;
  pictureUrl: string | null;
  role: string;
  updatedAt: Generated<Timestamp | null>;
}

export interface StaffAlts {
  bio: string | null;
  createdAt: Generated<Timestamp | null>;
  displayOrder: Generated<number | null>;
  id: Generated<number>;
  name: string;
  pictureUrl: string | null;
  role: string;
  staffId: number;
  updatedAt: Generated<Timestamp | null>;
}

export interface UserPasswords {
  createdAt: Generated<Timestamp | null>;
  id: Generated<number>;
  passwordHash: string;
  userId: number;
}

export interface Users {
  avatarUrl: string | null;
  createdAt: Generated<Timestamp | null>;
  displayName: string;
  email: string;
  id: Generated<number>;
  role: Generated<UserRole>;
  updatedAt: Generated<Timestamp | null>;
  username: string | null;
}

export interface DB {
  imageAssets: ImageAssets;
  loginAttempts: LoginAttempts;
  menuCategories: MenuCategories;
  menuItems: MenuItems;
  pageContent: PageContent;
  pages: Pages;
  sessions: Sessions;
  siteSettings: SiteSettings;
  staff: Staff;
  staffAlts: StaffAlts;
  userPasswords: UserPasswords;
  users: Users;
}


// Use these for zod schema enums or other purposes, since the kysely enums are just types
export const UserRoleArrayValues: [UserRole, ...UserRole[]] = ["admin","user"];
// Note: kysely maps the table/column/enum names from snake_case to camelCase and PascalCase. When running SQL statements, make sure to use snake_case, but TypeScript code should use camelCase or PascalCase.